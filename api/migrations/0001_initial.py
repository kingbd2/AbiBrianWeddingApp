# Generated by Django 2.2 on 2019-05-09 01:46

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('street_num', models.CharField(blank=True, max_length=100)),
                ('sreet_name', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('save_the_date_sent', models.DateTimeField(default=None, null=True)),
                ('is_invited', models.BooleanField(blank=True, default=False, null=True)),
                ('is_attending', models.NullBooleanField(default=None)),
                ('category', models.CharField(blank=True, max_length=20, null=True)),
                ('invitation_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('invitation_sent', models.DateTimeField(blank=True, default=None, null=True)),
                ('invitation_opened', models.DateTimeField(blank=True, default=None, null=True)),
                ('rehearsal_dinner', models.BooleanField(blank=True, default=False, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_primarycontact', models.BooleanField(default=False)),
                ('iskid', models.BooleanField(default=False)),
                ('hasguest', models.BooleanField(default=False)),
                ('group', models.CharField(blank=True, max_length=50, null=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(max_length=255, verbose_name='email address')),
                ('is_attending', models.NullBooleanField(default=None)),
                ('party', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Party')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Role')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=100)),
                ('date', models.DateField()),
                ('start_time', models.DateField(auto_now=True)),
                ('end_time', models.DateField(auto_now=True)),
                ('details', models.TextField()),
                ('location_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Location')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Role')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.TextField(blank=True, null=True)),
                ('last_name', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
